# It stores environment variables like secretes, keys, data URLs and port outside the main code
# To keep sensitive info safe, make the app easy to configure, and separate from configuration
# Without touching the app code we change the environments like port to run on and database to connect
# Security: Keeps secrets like API keys, passwords out of source code.
# Flexibility: Easily switch between dev, test, and production environments.

PORT = 5000
DB_PORT = Your_DB_PORT_Number
DB_HOST = localhost
DB_USER = Your_DB_User_Name
DB_PASSWORD = Your_DB_Password
DB_NAME = Your_DB_Name
DB_DIALECT = mssql
JWT_SECRET = Your_JWT_Secret_Key
# DB_DIALECT Specifies the type of database we are using in the application.
# Especially whe we are using an ORM(Object Relational Mapper) like Sequelize.
# ORM like sequelize needs to know how to talk to the database. each DB like
# MYSQL, PostgreeSQL, MSSQL, etc. has its own "dialect" or language features.
# This varaible DB_DIALECT tells the app which one to use.

# An ORM(Object-Relatonal Mapper) is a tool or library that helps you to interact
# with a database using your programming language(like javascript) instead of writing raw SQL queries.
# Simply it lets to use of JavaScript objects to represent database tables and
# Perform operations like insert, update, delete, fetch using functions not with SQL
# Without ORM: SELECT * FROM users WHERE id = 1;
# WIth ORM: const user = await User.findByPk(1);
# Sequelize - Full-featured ORM for SQL databases
# Mongoose - Not for SQL, but for MongoDB
# Simply a way to work with databases using code instead of SQL
# Easier, cleaner, and more maintainable